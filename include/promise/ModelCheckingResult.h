#pragma once

#include "promise/StringUtils.h"

#include <boost/dynamic_bitset/dynamic_bitset.hpp>
#include <boost/graph/sequential_vertex_coloring.hpp>

#include <Eigen/Dense>
#include <Eigen/src/Core/ArithmeticSequence.h>
#include <Eigen/src/Core/Matrix.h>
#include <Eigen/src/Core/MatrixBase.h>

#include <fstream>
#include <iostream>
#include <string>
#include <sys/wait.h>

// Yosys headers
#include "kernel/log.h"
#include "kernel/rtlil.h"
#include "kernel/yosys_common.h"

// ABC headers

#include <vector>

USING_YOSYS_NAMESPACE

// String constants for parsing the model checker's output log files.
const std::string ABC_SAFE = "snl_UNSAT";
const std::string ABC_UNSAFE = "snl_SAT";
const std::string RIC3_SAFE = "UNSAT";
const std::string RIC3_UNSAFE = "SAT";

/// \brief A struct to represent the result of model checking.
struct ModelCheckingResult {

  enum Status { SAFE, UNSAFE, UNKNOWN };

  /// \brief The result of the model checking, can be
  /// - SAFE: the property is satisfied
  /// - UNSAFE: the property is not satisfied and a reachable counterexample
  /// exists
  /// - UNKNOWN: the model checking is unable to prove the property without
  /// returning a counterexample
  Status status = UNKNOWN;

  /// \brief The values of the signals at each state in the counterexample.
  /// Maps each signal to the value to be applied at each state
  /// e.g., IdString(rst), {1, 0, 0, 0, ...}
  ///
  /// \note: please note that, to print the bitset as a regular integer, we need
  /// to reverse it (otherwise, the left-most bit will be the LSB instead of the
  /// MSB).
  std::map<RTLIL::IdString, std::vector<boost::dynamic_bitset<>>> inputValues;

  /// \brief Number of states in CEX
  unsigned numCexStates = 0;

  /// \brief A static method to create a ModelCheckingResult from a log File
  /// generated by the pdr command in ABC. When you run the pdr command in ABC
  /// with -L <logFile> enabled, ABC will write a logfile to <logFile>. This
  /// command parses the content of <logFile>.
  ///
  /// \param module: the RTLIL module that was used for the model checking.
  ///
  /// \param logFile: the path to the log file generated by ABC.
  ///
  /// \return a ModelCheckingResult object containing the status and the input
  /// signals to the RTL module
  static ModelCheckingResult parseAbcLogFile(RTLIL::Module *module,
                                             const std::string &logFile);

  /// \brief A static method to create a ModelCheckingResult from a log file
  /// generated by the rIC3 binary. This command assumes that you have piped the
  /// stdout of rIC3 execution into a file <logFile>.
  ///
  /// \param module: the RTLIL module that was used for the model checking.
  ///
  /// \param logFile: the path to the log file generated by rIC3.
  ///
  /// \return a ModelCheckingResult object containing the status and the input
  /// signals to the RTL module
  static ModelCheckingResult parserIC3LogFile(RTLIL::Module *module,
                                              const std::string &logFile);

  static ModelCheckingResult trivialInvariant() {

    ModelCheckingResult result;
    result.status = SAFE;
    return result;
  }
};