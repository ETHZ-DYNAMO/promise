#pragma once

#include "kernel/rtlil.h"
#include <filesystem>

#include "promise/ModelCheckingResult.h"

/// \brief Create a Verilator testbench for a counterexample
///
/// \param pathToVerilatorTb: the name of the Verilator TB file in cpp
/// \param module: the RTLIL module to create the testbench for
/// \param simCycles: the number of clock cycles to simulate
/// \param vcdFileName: the name of the VCD file to dump the simulation results
/// \param seed: the random seed to use for generating random inputs
void createRandomTestBench(const std::filesystem::path &pathToVerilatorTb,
                           Yosys::RTLIL::Module *module, unsigned simCycles,
                           const std::string &vcdFileName, unsigned seed);

/// \brief Create a Verilator testbench for a counterexample
///
/// \param pathToVerilatorTb: the name of the Verilator TB file in cpp
/// \param module: the RTLIL module to create the testbench for
/// \param cex: the counterexample trace to be simulated
/// \param vcdFileName: the name of the VCD file to dump the simulation results
void createCexTestBench(const std::filesystem::path &pathToVerilatorTb,
                        RTLIL::Module *module, ModelCheckingResult cex,
                        const std::string &vcdFileName);

/// \brief Build the simulation model from Verilog code
///
/// \param objDir: location for the files generated by Verilator (override
/// "obj_dir")
/// \param verilogSrcs: list of Verilog source files to compile
/// \param testbench: the cpp testbench file to run the simulation
/// \param topName: the name of the top module in the Verilog design
void buildVerilatorModel(const std::filesystem::path &objDir,
                         const std::vector<std::filesystem::path> &verilogSrcs,
                         const std::filesystem::path &testbench,
                         const std::string &topName);

/// \brief Run Verilator linting on the provided Verilog sources, it throws an
/// runtime error if verilator fails.
///
/// \param verilogSrcs: list of Verilog source files to lint
/// \param topName: the name of the top module in the Verilog design
void runVerilatorLinting(const std::vector<std::string> &verilogSrcs,
                         const std::string &topName);